# docker-compose.yml
# version: '3.8'

services:
# React.js service
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.prod
  #   ports:
  #     - "3000:80"
  #   depends_on:
  #     - app  
  #   networks:
  #     - app-network
  #   restart: unless-stopped
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev   # Use a separate Dockerfile for development
    volumes:
      - ./frontend:/app            # Mount code for live reloading
      - /app/node_modules           # Avoid node_modules conflicts
    ports:
      - "3000:3000"                # Map directly to 3000 for development server
    command: ["npm", "start"]      # Use npm for hot reload
    depends_on:
      - app
    networks:
      - app-network
    restart: unless-stopped
  # Node.js/Express service
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app 
      - /app/node_modules
    env_file:
      - ./backend/.env  # Load environment variables from .env file in backend directory
    ports:
      - '5000:5000' 
    depends_on:
      - couchdb 
    networks:
      - app-network
    restart: unless-stopped
    # CouchDB service
  couchdb:
    image: couchdb:3.4  # Official CouchDB image
    ports:
      - "5984:5984"  # Expose CouchDB on port 5984
    environment:
      - COUCHDB_USER=admin  # Replace with your admin username
      - COUCHDB_PASSWORD=admin123hjy  # Replace with your admin password
      - COUCHDB_CLUSTER_Q=1     # Set the default `q` value to 1 for single-node setup
      - COUCHDB_CLUSTER_N=1  
    volumes:
      - couchdb-data:/opt/couchdb/data  # Persistent storage for CouchDB
    networks:
      - app-network
    restart: unless-stopped
  # MongoDB service
  # mongo:
  #   image: mongo:6.0  #the official MongoDB image 
  #   ports:
  #     - '27017:27017' 
  #   volumes:
  #     - mongo-data:/data/db 
  #   networks:
  #     - app-network
  #   command: ["mongod", "--bind_ip_all"]
  #   restart: unless-stopped
# volumes:
#   mongo-data:
volumes:
  couchdb-data:
networks:
  app-network:
